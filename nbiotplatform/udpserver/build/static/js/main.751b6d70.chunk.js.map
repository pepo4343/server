{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","socket","am4core","am4themes_animated","App","useState","msg","setMsg","useEffect","socketio","openSocket","connect","on","console","log","connected","data","current","concat","chart","dispose","className","map","item","index","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iKAAAA,EAAOC,QAAU,IAA0B,kC,sFCUvCC,E,kHAFJC,IAAiBC,KAoEFC,MAjEf,WAAgB,IAAD,SACSC,mBAAS,IADlB,mBACNC,EADM,KACDC,EADC,KA6Bb,OA3BAC,qBAAU,WAER,IAAIC,GADJR,EAASS,IAAW,yBACEC,UAkBtB,OAjBAV,EAAOW,GAAG,WAAW,WACnBC,QAAQC,IAAI,QAASL,EAASM,cAEhCd,EAAOW,GAAG,cAAc,WACtBC,QAAQC,IAAI,QAASL,EAASM,cAEhCd,EAAOW,GAAG,aAAa,SAAAI,GACrBH,QAAQC,IAAIE,MAEdf,EAAOW,GAAG,WAAW,SAAAI,GACnBT,GAAO,SAAAU,GAEL,OADaA,EAAQC,OAAO,CAACF,OAG/BH,QAAQC,IAAIE,MAGP,WACD,EAAKG,OACP,EAAKA,MAAMC,aAGd,IACHP,QAAQC,IAAIR,GAEV,yBAAKe,UAAU,OACb,uCACCf,EAAIgB,KAAI,SAACC,EAAMC,GACd,OACE,uBAAGC,IAAKD,GACLA,EAAQ,EADX,KACgBD,EAAKjB,UClCXoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.751b6d70.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport openSocket from \"socket.io-client\";\n\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nam4core.useTheme(am4themes_animated);\n\nvar socket;\nfunction App() {\n  const [msg, setMsg] = useState([]);\n  useEffect(() => {\n    socket = openSocket(\"http://178.128.16.9/\");\n    var socketio = socket.connect();\n    socket.on(\"connect\", () => {\n      console.log(\"check\", socketio.connected);\n    });\n    socket.on(\"disconnect\", () => {\n      console.log(\"check\", socketio.connected);\n    });\n    socket.on(\"numclient\", data => {\n      console.log(data);\n    });\n    socket.on(\"message\", data => {\n      setMsg(current => {\n        let newMsg = current.concat([data]);\n        return newMsg;\n      });\n      console.log(data);\n    });\n\n    return () => {\n      if (this.chart) {\n        this.chart.dispose();\n      }\n    };\n  }, []);\n  console.log(msg);\n  return (\n    <div className=\"App\">\n      <h1>PM demo</h1>\n      {msg.map((item, index) => {\n        return (\n          <p key={index}>\n            {index + 1}. {item.msg}\n          </p>\n        );\n      })}\n    </div>\n  );\n}\n\nfunction generateChartData() {\n  var chartData = [];\n  var firstDate = new Date();\n  firstDate.setDate(firstDate.getDate() - 1000);\n  var visits = 1200;\n  for (var i = 0; i < 50; i++) {\n    // we create date objects here. In your data, you can have date strings\n    // and then set format of your dates using chart.dataDateFormat property,\n    // however when possible, use date objects, as this will speed up chart rendering.\n    var newDate = new Date(firstDate);\n    newDate.setDate(newDate.getDate() + i);\n\n    visits += Math.round((Math.random() < 0.5 ? 1 : -1) * Math.random() * 10);\n\n    chartData.push({\n      date: newDate,\n      visits: visits\n    });\n  }\n  return chartData;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}